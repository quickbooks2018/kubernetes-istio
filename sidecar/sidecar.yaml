# https://aws.amazon.com/blogs/compute/nginx-reverse-proxy-sidecar-container-on-amazon-ecs/
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: position-simulator
spec:
  selector:
    matchLabels:
      app: position-simulator
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: position-simulator
    spec:
      containers:
      - name: position-simulator
        image: richardchesterwood/istio-fleetman-position-simulator:6
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        command: ["java","-Xmx50m","-jar","webapp.jar"]
        imagePullPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: position-tracker
spec:
  selector:
    matchLabels:
      app: position-tracker
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: position-tracker
    spec:
      containers:
      - name: position-tracker
        image: richardchesterwood/istio-fleetman-position-tracker:6
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        command: ["java","-Xmx50m","-jar","webapp.jar"]
        imagePullPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
spec:
  selector:
    matchLabels:
      app: api-gateway
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: richardchesterwood/istio-fleetman-api-gateway:6
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        command: ["java","-Xmx50m","-jar","webapp.jar"]
        imagePullPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vehicle-telemetry
spec:
  selector:
    matchLabels:
      app: vehicle-telemetry
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: vehicle-telemetry
    spec:
      containers:
      - name: vehicle-telemtry
        image: richardchesterwood/istio-fleetman-vehicle-telemetry:6
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        imagePullPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: staff-service
spec:
  selector:
    matchLabels:
      app: staff-service
  replicas: 1
  template: # template for the pods
    metadata:
      labels:
        app: staff-service
    spec:
      containers:
      - name: staff-service
        image: richardchesterwood/istio-fleetman-staff-service:6
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        imagePullPolicy: Always
        ports:
        - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: fleetman-position-tracker

spec:
  # This defines which pods are going to be represented by this Service
  # The service becomes a network endpoint for either other services
  # or maybe external users to connect to (eg browser)
  selector:
    app: position-tracker
  ports:
    - name: http
      port: 8080
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: fleetman-api-gateway
spec:
  selector:
    app: api-gateway
  ports:
    - name: http
      port: 8080
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: fleetman-vehicle-telemetry
spec:
  selector:
    app: vehicle-telemetry
  ports:
    - name: http
      port: 8080
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: fleetman-staff-service
spec:
  selector:
    app: staff-service
  ports:
    - name: http
      port: 8080
  type: ClusterIP
# yaml configuration for nginx side car with self signed & configmap tls proxy to actuall application in the same pod
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: default
data:
  nginx.conf: |
      server {
        listen 443 ssl;
        ssl_certificate /etc/nginx/ssl/saqlainmushtaq.com.crt;
        ssl_certificate_key /etc/nginx/ssl/saqlainmushtaq.com.key;
        location / {
          proxy_pass http://localhost:80;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection 'upgrade';
          proxy_set_header Host $host;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_cache_bypass $http_upgrade;

          proxy_connect_timeout 5s;
          proxy_send_timeout 1s;
          proxy_read_timeout 1s;

          proxy_buffer_size 4k;
          proxy_buffers 4 32k;
          proxy_busy_buffers_size 64k;
          proxy_temp_file_write_size 64k;

          client_body_timeout 1s;
        
        
        }
      }

# use tls.sh to generate self signed certificate
#  kubectl create -n default secret generic tls-secret --from-file=tls/saqlainmushtaq.com.key --from-file=tls/saqlainmushtaq.com.crt
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fleetman-webapp
spec:
  selector:
    matchLabels:
      app: webapp
  replicas: 10
  template: # template for the pods
    metadata:
      labels:
        app: webapp
    spec:
      containers:
      - name: webapp
        image: richardchesterwood/istio-fleetman-webapp-angular:6
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: production-microservice
        imagePullPolicy: Always
      - name: nginx
        image: nginx:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 443
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
          readOnly: true
        - name: nginx-ssl
          mountPath: /etc/nginx/ssl
          readOnly: true
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-ssl
        secret:
          secretName: tls-secret
---
apiVersion: v1
kind: Service
metadata:
  name: fleetman-webapp
  namespace: default
  labels:
    app: fleetman-webapp
spec:
  type: ClusterIP
  ports:
  - port: 443
    targetPort: 443
  selector:
    app: webapp